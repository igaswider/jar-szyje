/*Prefix mixin*/
@mixin prefix-test($properties, $value) {
  @each $prefix in '-webkit-', '-moz-', '-ms-', '-o-', '' {
    #{$prefix}$properties: $value;
  }
}

/*media-queries mixin*/

@mixin screen($size) {
  $desktopLarge: "(max-width: 1900px)";
  $desktopSmall: "(max-width: 1399px)";
  $tablet: "(max-width: 959px)";
  $mobile: "(max-width: 767px)";
  $mobileLandScape: "(max-width: 767px) and (orientation: landscape)";
  $mobilePortrait: "(max-width: 767px) and (orientation: portrait)";
  @if $size == desktopLarge {
    @media only screen and #{$desktopLarge} {
      @content;
    }
  }
  @else if $size == desktopSmall {
    @media only screen and #{$desktopSmall} {
      @content;
    }
  }
  @else if $size == tablet {
    @media only screen and #{$tablet} {
      @content;
    }
  }
  @else if $size == mobile {
    @media only screen and #{$mobile} {
      @content;
    }
  }
  @else if $size == mobileLandScape {
    @media only screen and #{$mobileLandScape} {
      @content;
    }
  }
  @else if $size == mobilePortrait {
    @media only screen and #{$mobilePortrait} {
      @content;
    }
  }
  @else {
    @media only screen and #{$size} {
      @content;
    }
  }
}

/*fluid typography*/

@mixin fluid-type($properties, $min-vw, $max-vw, $min-value, $max-value) {
  @each $property in $properties {
    #{$property}: $min-value;
  }

  @media screen and (min-width: $min-vw) {
    @each $property in $properties {
      #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)});
    }
  }

  @media screen and (min-width: $max-vw) {
    @each $property in $properties {
      #{$property}: $max-value;
    }
  }
}

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}
